// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace CRUDExample.Models
{
    public partial class testContext : DbContext
    {
        public testContext()
        {
        }

        public testContext(DbContextOptions<testContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Address_1> Address_1s { get; set; }
        public virtual DbSet<Address_2> Address_2s { get; set; }
        public virtual DbSet<Address_3> Address_3s { get; set; }
        public virtual DbSet<Address_All> Address_Alls { get; set; }
        public virtual DbSet<AspNet_SqlCacheTablesForChangeNotification> AspNet_SqlCacheTablesForChangeNotifications { get; set; }
        public virtual DbSet<Calendar_Schedule> Calendar_Schedules { get; set; }
        public virtual DbSet<Class1_Movie> Class1_Movies { get; set; }
        public virtual DbSet<Drink_Order_D> Drink_Order_Ds { get; set; }
        public virtual DbSet<Drink_Order_M> Drink_Order_Ms { get; set; }
        public virtual DbSet<Drink_Product> Drink_Products { get; set; }
        public virtual DbSet<FileUpload_DB> FileUpload_DBs { get; set; }
        public virtual DbSet<Food_Calorie> Food_Calories { get; set; }
        public virtual DbSet<Food_Menu> Food_Menus { get; set; }
        public virtual DbSet<News_Test> News_Tests { get; set; }
        public virtual DbSet<News_Test_Class> News_Test_Classes { get; set; }
        public virtual DbSet<News_Test_Talk> News_Test_Talks { get; set; }
        public virtual DbSet<News_User> News_Users { get; set; }
        public virtual DbSet<Question_D1> Question_D1s { get; set; }
        public virtual DbSet<Question_D2> Question_D2s { get; set; }
        public virtual DbSet<Question_M> Question_Ms { get; set; }
        public virtual DbSet<Vote_1> Vote_1s { get; set; }
        public virtual DbSet<Vote_2> Vote_2s { get; set; }
        public virtual DbSet<Vote_Auto> Vote_Autos { get; set; }
        public virtual DbSet<aspnet_Application> aspnet_Applications { get; set; }
        public virtual DbSet<aspnet_Membership> aspnet_Memberships { get; set; }
        public virtual DbSet<aspnet_Path> aspnet_Paths { get; set; }
        public virtual DbSet<aspnet_PersonalizationAllUser> aspnet_PersonalizationAllUsers { get; set; }
        public virtual DbSet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers { get; set; }
        public virtual DbSet<aspnet_Profile> aspnet_Profiles { get; set; }
        public virtual DbSet<aspnet_Role> aspnet_Roles { get; set; }
        public virtual DbSet<aspnet_SchemaVersion> aspnet_SchemaVersions { get; set; }
        public virtual DbSet<aspnet_User> aspnet_Users { get; set; }
        public virtual DbSet<aspnet_WebEvent_Event> aspnet_WebEvent_Events { get; set; }
        public virtual DbSet<db_user> db_users { get; set; }
        public virtual DbSet<student_class> student_classes { get; set; }
        public virtual DbSet<student_department> student_departments { get; set; }
        public virtual DbSet<student_test> student_tests { get; set; }
        public virtual DbSet<test> tests { get; set; }
        public virtual DbSet<test1> test1s { get; set; }
        public virtual DbSet<test_ad> test_ads { get; set; }
        public virtual DbSet<test_class> test_classes { get; set; }
        public virtual DbSet<test_only> test_onlies { get; set; }
        public virtual DbSet<test_talk> test_talks { get; set; }
        public virtual DbSet<test_timestamp> test_timestamps { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Address_1>(entity =>
            {
                entity.HasKey(e => e.a1_id);

                entity.ToTable("Address_1");

                entity.Property(e => e.city_name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Address_2>(entity =>
            {
                entity.HasKey(e => e.a2_id);

                entity.ToTable("Address_2");

                entity.Property(e => e.city_name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.district_name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Address_3>(entity =>
            {
                entity.HasKey(e => e.a3_id);

                entity.ToTable("Address_3");

                entity.Property(e => e.street_name).HasMaxLength(50);
            });

            modelBuilder.Entity<Address_All>(entity =>
            {
                entity.ToTable("Address_All");

                entity.Property(e => e.city_name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.district_name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.street_name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AspNet_SqlCacheTablesForChangeNotification>(entity =>
            {
                entity.HasKey(e => e.tableName)
                    .HasName("PK__AspNet_S__93F7AC698D7BCAF7");

                entity.ToTable("AspNet_SqlCacheTablesForChangeNotification");

                entity.Property(e => e.notificationCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Calendar_Schedule>(entity =>
            {
                entity.HasKey(e => e.CS_id);

                entity.ToTable("Calendar_Schedule");

                entity.Property(e => e.CS_summary).HasMaxLength(250);

                entity.Property(e => e.CS_time).HasColumnType("smalldatetime");

                entity.Property(e => e.CS_title)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Class1_Movie>(entity =>
            {
                entity.ToTable("Class1_Movie");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ReleaseDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Drink_Order_D>(entity =>
            {
                entity.ToTable("Drink_Order_D");

                entity.Property(e => e.approved)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.drink_name).HasMaxLength(50);

                entity.Property(e => e.ice_degree).HasMaxLength(50);

                entity.Property(e => e.meno).HasMaxLength(50);

                entity.Property(e => e.sweet_degree).HasMaxLength(50);
            });

            modelBuilder.Entity<Drink_Order_M>(entity =>
            {
                entity.ToTable("Drink_Order_M");

                entity.Property(e => e.have_paid)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.memo).HasMaxLength(150);

                entity.Property(e => e.order_time).HasColumnType("datetime");

                entity.Property(e => e.user_name).HasMaxLength(50);

                entity.Property(e => e.user_phone).HasMaxLength(50);
            });

            modelBuilder.Entity<Drink_Product>(entity =>
            {
                entity.ToTable("Drink_Product");

                entity.Property(e => e.drink_class).HasMaxLength(50);

                entity.Property(e => e.drink_name).HasMaxLength(50);
            });

            modelBuilder.Entity<FileUpload_DB>(entity =>
            {
                entity.HasKey(e => e.FileUpload_DB_id);

                entity.ToTable("FileUpload_DB");

                entity.Property(e => e.FileUpload_FileName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FileUpload_Memo).HasMaxLength(250);

                entity.Property(e => e.FileUpload_User)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'圖片上傳者的姓名')");

                entity.Property(e => e.FileUpload_time).HasColumnType("datetime");
            });

            modelBuilder.Entity<Food_Calorie>(entity =>
            {
                entity.ToTable("Food_Calorie");

                entity.Property(e => e.food_Calorie1).HasColumnName("food_Calorie");

                entity.Property(e => e.food_name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.food_unit).HasMaxLength(50);
            });

            modelBuilder.Entity<Food_Menu>(entity =>
            {
                entity.ToTable("Food_Menu");

                entity.Property(e => e.food_class).HasMaxLength(50);

                entity.Property(e => e.food_name).HasMaxLength(50);
            });

            modelBuilder.Entity<News_Test>(entity =>
            {
                entity.HasKey(e => e.test_id)
                    .HasName("PK_News_test");

                entity.ToTable("News_Test");

                entity.Property(e => e.approved)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.author).HasMaxLength(50);

                entity.Property(e => e.summary).HasMaxLength(250);

                entity.Property(e => e.test_class).HasMaxLength(50);

                entity.Property(e => e.test_time).HasColumnType("datetime");

                entity.Property(e => e.title).HasMaxLength(50);
            });

            modelBuilder.Entity<News_Test_Class>(entity =>
            {
                entity.HasKey(e => e.Test_Class_id);

                entity.ToTable("News_Test_Class");

                entity.Property(e => e.test_class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.test_class_1).HasMaxLength(50);

                entity.Property(e => e.test_class_2).HasMaxLength(50);
            });

            modelBuilder.Entity<News_Test_Talk>(entity =>
            {
                entity.HasKey(e => e.test_talk_id);

                entity.ToTable("News_Test_Talk");

                entity.Property(e => e.author).HasMaxLength(50);

                entity.Property(e => e.email).HasMaxLength(50);

                entity.Property(e => e.test_time).HasColumnType("datetime");
            });

            modelBuilder.Entity<News_User>(entity =>
            {
                entity.HasKey(e => e.User_id);

                entity.ToTable("News_User");

                entity.Property(e => e.User_Account)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.User_Password)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.User_Rank).HasDefaultValueSql("((1))");

                entity.Property(e => e.User_Real_Name).HasMaxLength(50);

                entity.Property(e => e.User_email).HasMaxLength(50);
            });

            modelBuilder.Entity<Question_D1>(entity =>
            {
                entity.HasKey(e => e.D1_id);

                entity.ToTable("Question_D1");

                entity.Property(e => e.D1_mustKeyin)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.D1_summary).HasMaxLength(150);

                entity.Property(e => e.D1_title)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D1_type)
                    .IsRequired()
                    .HasMaxLength(2);
            });

            modelBuilder.Entity<Question_D2>(entity =>
            {
                entity.HasKey(e => e.D2_id);

                entity.ToTable("Question_D2");

                entity.Property(e => e.answer1).HasMaxLength(50);

                entity.Property(e => e.answer10).HasMaxLength(50);

                entity.Property(e => e.answer11).HasMaxLength(50);

                entity.Property(e => e.answer12).HasMaxLength(50);

                entity.Property(e => e.answer13).HasMaxLength(50);

                entity.Property(e => e.answer14).HasMaxLength(50);

                entity.Property(e => e.answer15).HasMaxLength(50);

                entity.Property(e => e.answer2).HasMaxLength(50);

                entity.Property(e => e.answer3).HasMaxLength(50);

                entity.Property(e => e.answer4).HasMaxLength(50);

                entity.Property(e => e.answer5).HasMaxLength(50);

                entity.Property(e => e.answer6).HasMaxLength(50);

                entity.Property(e => e.answer7).HasMaxLength(50);

                entity.Property(e => e.answer8).HasMaxLength(50);

                entity.Property(e => e.answer9).HasMaxLength(50);
            });

            modelBuilder.Entity<Question_M>(entity =>
            {
                entity.HasKey(e => e.M_id);

                entity.ToTable("Question_M");

                entity.Property(e => e.M_enable)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.M_summary).HasMaxLength(250);

                entity.Property(e => e.M_title)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.end_time).HasColumnType("datetime");

                entity.Property(e => e.start_time).HasColumnType("datetime");
            });

            modelBuilder.Entity<Vote_1>(entity =>
            {
                entity.ToTable("Vote_1");

                entity.Property(e => e.vote_11).HasColumnName("vote_1");
            });

            modelBuilder.Entity<Vote_2>(entity =>
            {
                entity.ToTable("Vote_2");

                entity.Property(e => e.vote_date).HasColumnType("datetime");

                entity.Property(e => e.vote_ip).HasMaxLength(50);

                entity.Property(e => e.vote_to).HasMaxLength(50);
            });

            modelBuilder.Entity<Vote_Auto>(entity =>
            {
                entity.HasKey(e => e.vote_id);

                entity.ToTable("Vote_Auto");

                entity.Property(e => e.Vote_time).HasColumnType("datetime");

                entity.Property(e => e.question_1).HasMaxLength(50);

                entity.Property(e => e.question_10).HasMaxLength(50);

                entity.Property(e => e.question_2).HasMaxLength(50);

                entity.Property(e => e.question_3).HasMaxLength(50);

                entity.Property(e => e.question_4).HasMaxLength(50);

                entity.Property(e => e.question_5).HasMaxLength(50);

                entity.Property(e => e.question_6).HasMaxLength(50);

                entity.Property(e => e.question_7).HasMaxLength(50);

                entity.Property(e => e.question_8).HasMaxLength(50);

                entity.Property(e => e.question_9).HasMaxLength(50);

                entity.Property(e => e.title).HasMaxLength(50);
            });

            modelBuilder.Entity<aspnet_Application>(entity =>
            {
                entity.HasKey(e => e.ApplicationId)
                    .HasName("PK__aspnet_A__C93A4C9839891163")
                    .IsClustered(false);

                entity.HasIndex(e => e.LoweredApplicationName, "UQ__aspnet_A__17477DE4BD0D283D")
                    .IsUnique();

                entity.HasIndex(e => e.ApplicationName, "UQ__aspnet_A__30910331FF072F9B")
                    .IsUnique();

                entity.Property(e => e.ApplicationId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.ApplicationName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Description).HasMaxLength(256);

                entity.Property(e => e.LoweredApplicationName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<aspnet_Membership>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__aspnet_M__1788CC4D8272D543")
                    .IsClustered(false);

                entity.ToTable("aspnet_Membership");

                entity.Property(e => e.UserId).ValueGeneratedNever();

                entity.Property(e => e.Comment).HasColumnType("ntext");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.FailedPasswordAnswerAttemptWindowStart).HasColumnType("datetime");

                entity.Property(e => e.FailedPasswordAttemptWindowStart).HasColumnType("datetime");

                entity.Property(e => e.LastLockoutDate).HasColumnType("datetime");

                entity.Property(e => e.LastLoginDate).HasColumnType("datetime");

                entity.Property(e => e.LastPasswordChangedDate).HasColumnType("datetime");

                entity.Property(e => e.LoweredEmail).HasMaxLength(256);

                entity.Property(e => e.MobilePIN).HasMaxLength(16);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.PasswordAnswer).HasMaxLength(128);

                entity.Property(e => e.PasswordQuestion).HasMaxLength(256);

                entity.Property(e => e.PasswordSalt)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.aspnet_Memberships)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Me__Appli__540C7B00");

                entity.HasOne(d => d.User)
                    .WithOne(p => p.aspnet_Membership)
                    .HasForeignKey<aspnet_Membership>(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Me__UserI__55009F39");
            });

            modelBuilder.Entity<aspnet_Path>(entity =>
            {
                entity.HasKey(e => e.PathId)
                    .HasName("PK__aspnet_P__CD67DC585040D7E6")
                    .IsClustered(false);

                entity.Property(e => e.PathId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.LoweredPath)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Path)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.aspnet_Paths)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Pa__Appli__55F4C372");
            });

            modelBuilder.Entity<aspnet_PersonalizationAllUser>(entity =>
            {
                entity.HasKey(e => e.PathId)
                    .HasName("PK__aspnet_P__CD67DC590EA399EA");

                entity.Property(e => e.PathId).ValueGeneratedNever();

                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.PageSettings)
                    .IsRequired()
                    .HasColumnType("image");

                entity.HasOne(d => d.Path)
                    .WithOne(p => p.aspnet_PersonalizationAllUser)
                    .HasForeignKey<aspnet_PersonalizationAllUser>(d => d.PathId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Pe__PathI__56E8E7AB");
            });

            modelBuilder.Entity<aspnet_PersonalizationPerUser>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK__aspnet_P__3214EC06150196DD")
                    .IsClustered(false);

                entity.ToTable("aspnet_PersonalizationPerUser");

                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.PageSettings)
                    .IsRequired()
                    .HasColumnType("image");

                entity.HasOne(d => d.Path)
                    .WithMany(p => p.aspnet_PersonalizationPerUsers)
                    .HasForeignKey(d => d.PathId)
                    .HasConstraintName("FK__aspnet_Pe__PathI__57DD0BE4");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.aspnet_PersonalizationPerUsers)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK__aspnet_Pe__UserI__58D1301D");
            });

            modelBuilder.Entity<aspnet_Profile>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__aspnet_P__1788CC4CAC8630A3");

                entity.ToTable("aspnet_Profile");

                entity.Property(e => e.UserId).ValueGeneratedNever();

                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.PropertyNames)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.PropertyValuesBinary)
                    .IsRequired()
                    .HasColumnType("image");

                entity.Property(e => e.PropertyValuesString)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.HasOne(d => d.User)
                    .WithOne(p => p.aspnet_Profile)
                    .HasForeignKey<aspnet_Profile>(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Pr__UserI__59C55456");
            });

            modelBuilder.Entity<aspnet_Role>(entity =>
            {
                entity.HasKey(e => e.RoleId)
                    .HasName("PK__aspnet_R__8AFACE1BF7BF5A1F")
                    .IsClustered(false);

                entity.Property(e => e.RoleId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Description).HasMaxLength(256);

                entity.Property(e => e.LoweredRoleName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.aspnet_Roles)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Ro__Appli__5AB9788F");
            });

            modelBuilder.Entity<aspnet_SchemaVersion>(entity =>
            {
                entity.HasKey(e => new { e.Feature, e.CompatibleSchemaVersion })
                    .HasName("PK__aspnet_S__5A1E6BC19162C620");

                entity.Property(e => e.Feature).HasMaxLength(128);

                entity.Property(e => e.CompatibleSchemaVersion).HasMaxLength(128);
            });

            modelBuilder.Entity<aspnet_User>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__aspnet_U__1788CC4D8FD60844")
                    .IsClustered(false);

                entity.Property(e => e.UserId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.LastActivityDate).HasColumnType("datetime");

                entity.Property(e => e.LoweredUserName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.MobileAlias).HasMaxLength(16);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.aspnet_Users)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Us__Appli__5BAD9CC8");

                entity.HasMany(d => d.Roles)
                    .WithMany(p => p.Users)
                    .UsingEntity<Dictionary<string, object>>(
                        "aspnet_UsersInRole",
                        l => l.HasOne<aspnet_Role>().WithMany().HasForeignKey("RoleId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__aspnet_Us__RoleI__5CA1C101"),
                        r => r.HasOne<aspnet_User>().WithMany().HasForeignKey("UserId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__aspnet_Us__UserI__5D95E53A"),
                        j =>
                        {
                            j.HasKey("UserId", "RoleId").HasName("PK__aspnet_U__AF2760AD1BAC0AF1");

                            j.ToTable("aspnet_UsersInRoles");
                        });
            });

            modelBuilder.Entity<aspnet_WebEvent_Event>(entity =>
            {
                entity.HasKey(e => e.EventId)
                    .HasName("PK__aspnet_W__7944C810C4CD6E29");

                entity.Property(e => e.EventId)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ApplicationPath).HasMaxLength(256);

                entity.Property(e => e.ApplicationVirtualPath).HasMaxLength(256);

                entity.Property(e => e.Details).HasColumnType("ntext");

                entity.Property(e => e.EventOccurrence).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.EventSequence).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.EventTime).HasColumnType("datetime");

                entity.Property(e => e.EventTimeUtc).HasColumnType("datetime");

                entity.Property(e => e.EventType)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.ExceptionType).HasMaxLength(256);

                entity.Property(e => e.MachineName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Message).HasMaxLength(1024);

                entity.Property(e => e.RequestUrl).HasMaxLength(1024);
            });

            modelBuilder.Entity<db_user>(entity =>
            {
                entity.ToTable("db_user");

                entity.Property(e => e.DeleteRight)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("(N'N')")
                    .IsFixedLength();

                entity.Property(e => e.UpdateRight)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("(N'N')")
                    .IsFixedLength();

                entity.Property(e => e.email).HasMaxLength(50);

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.password)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.rank).HasDefaultValueSql("((1))");

                entity.Property(e => e.real_name).HasMaxLength(50);

                entity.Property(e => e.sex).HasMaxLength(2);
            });

            modelBuilder.Entity<student_class>(entity =>
            {
                entity.HasKey(e => e.student_id);

                entity.ToTable("student_class");

                entity.Property(e => e.student_id).HasMaxLength(50);

                entity.Property(e => e.student_class1)
                    .HasMaxLength(10)
                    .HasColumnName("student_class")
                    .IsFixedLength();
            });

            modelBuilder.Entity<student_department>(entity =>
            {
                entity.HasKey(e => e.sd_id);

                entity.ToTable("student_department");

                entity.Property(e => e.department_leader).HasMaxLength(50);

                entity.Property(e => e.student_department1)
                    .HasMaxLength(50)
                    .HasColumnName("student_department");
            });

            modelBuilder.Entity<student_test>(entity =>
            {
                entity.ToTable("student_test");

                entity.Property(e => e.city).HasMaxLength(50);

                entity.Property(e => e.name).HasMaxLength(50);

                entity.Property(e => e.student_id).HasMaxLength(50);
            });

            modelBuilder.Entity<test>(entity =>
            {
                entity.ToTable("test");

                entity.Property(e => e._class)
                    .HasMaxLength(50)
                    .HasColumnName("class");

                entity.Property(e => e.approved)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('n')")
                    .IsFixedLength();

                entity.Property(e => e.author).HasMaxLength(50);

                entity.Property(e => e.email_no).HasDefaultValueSql("((0))");

                entity.Property(e => e.get_no).HasDefaultValueSql("((0))");

                entity.Property(e => e.hit_no).HasDefaultValueSql("((0))");

                entity.Property(e => e.summary).HasMaxLength(200);

                entity.Property(e => e.test_time).HasColumnType("datetime");

                entity.Property(e => e.title).HasMaxLength(120);
            });

            modelBuilder.Entity<test1>(entity =>
            {
                entity.ToTable("test1");

                entity.Property(e => e.test).HasMaxLength(50);

                entity.Property(e => e.time_st)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<test_ad>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("test_ad");

                entity.Property(e => e.ad_id).ValueGeneratedOnAdd();

                entity.Property(e => e.ad_images).HasMaxLength(50);

                entity.Property(e => e.ad_time_end).HasColumnType("smalldatetime");

                entity.Property(e => e.ad_time_start).HasColumnType("smalldatetime");

                entity.Property(e => e.ad_url).HasMaxLength(50);
            });

            modelBuilder.Entity<test_class>(entity =>
            {
                entity.HasKey(e => e.test_class_id);

                entity.ToTable("test_class");

                entity.Property(e => e.test_class1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("test_class");

                entity.Property(e => e.test_class11)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("test_class1");

                entity.Property(e => e.test_class2)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<test_only>(entity =>
            {
                entity.HasKey(e => e.test_no);

                entity.ToTable("test_only");

                entity.Property(e => e.test_no).ValueGeneratedNever();

                entity.Property(e => e.test_id).ValueGeneratedOnAdd();

                entity.Property(e => e.test_title)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<test_talk>(entity =>
            {
                entity.ToTable("test_talk");

                entity.Property(e => e.author).HasMaxLength(50);

                entity.Property(e => e.email).HasMaxLength(50);

                entity.Property(e => e.test_time).HasColumnType("datetime");
            });

            modelBuilder.Entity<test_timestamp>(entity =>
            {
                entity.ToTable("test_timestamp");

                entity.Property(e => e.test_TS)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.test_time).HasColumnType("smalldatetime");

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}